{"remainingRequest":"/media/batman/New Volume1/Projects/Vue/vuetsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/batman/New Volume1/Projects/Vue/vuetsite/src/components/QuestionBox.vue?vue&type=style&index=0&id=62ab2b85&scoped=true&lang=css&","dependencies":[{"path":"/media/batman/New Volume1/Projects/Vue/vuetsite/src/components/QuestionBox.vue","mtime":1557511795898},{"path":"/media/batman/New Volume1/Projects/Vue/vuetsite/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/media/batman/New Volume1/Projects/Vue/vuetsite/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/media/batman/New Volume1/Projects/Vue/vuetsite/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/media/batman/New Volume1/Projects/Vue/vuetsite/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/batman/New Volume1/Projects/Vue/vuetsite/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.list-group{\n    margin-bottom: 15px;\n}\n.list-group-item:hover{\n    background: #EEE;\n    cursor: pointer;\n}\n.btn{\n    margin: 0 5px;\n}\n.selected{\n    background-color: lightblue;\n}\n.correct{\n    background-color: lightgreen;\n}\n.incorrect{\n    background-color: red;\n}\n",{"version":3,"sources":["QuestionBox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"QuestionBox.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"question-box-container\">\n        <b-jumbotron>\n           \n            <template slot=\"lead\">\n             {{ currentQuestion.question}}\n            </template>\n\n            <hr class=\"my-4\">\n\n            <b-list-group>\n                <b-list-group-item\n                v-for=\"(answer, index) in answers\"\n                :key=\"index\"\n                @click=\"selectAnswer(index)\"\n                :class=\"answerClass(index)\"\n                >\n                    {{ answer }}\n                </b-list-group-item>\n            </b-list-group>\n\n            <b-button \n            variant=\"primary\"\n            @click=\"submitAnswer\"\n            :disabled=\"selectedIndex === null || answered\"\n            >\n                Submit\n            </b-button>\n            <b-button @click=\"next\" variant=\"success\" \n            :disabled=\"numTotal === 10\"\n            href=\"#\">\n                Next\n            </b-button>\n        </b-jumbotron>\n    </div>\n</template>\n\n<script>\nimport _ from 'lodash'\n\nexport default {\n    props: {\n        currentQuestion: Object,\n        next: Function,\n        increment: Function\n    },\n    data: function() {\n        return {\n            selectedIndex: null,\n            correctIndex: null,\n            shuffledAnswers: [],\n            answered: false,\n            numTotal: 0\n        }\n    },\n    computed: {\n        answers() {\n            let answers = [...this.currentQuestion.incorrect_answers]\n            answers.push(this.currentQuestion.correct_answer)\n            return this.shuffledAnswers\n        }\n    },\n    watch: {\n        currentQuestion: {\n            immediate: true,\n            handler() {\n                this.selectedIndex = null;\n                this.answered = false\n                this.shuffleAnswers()\n            }\n        }\n    },\n    methods: {\n        selectAnswer(index) {\n            this.selectedIndex = index\n        },\n        submitAnswer() {\n            let isCorrect = false\n\n            if(this.selectedIndex === this.correctIndex ) {\n                isCorrect = true\n            }\n            this.answered = true\n\n            this.increment(isCorrect)\n        },\n        shuffleAnswers() {\n            let answers = [...this.currentQuestion.incorrect_answers, this.currentQuestion.correct_answer]\n            this.shuffledAnswers = _.shuffle(answers)\n            this.correctIndex = this.shuffledAnswers.indexOf(this.currentQuestion.correct_answer)\n        },\n        answerClass(index) {\n            let answerClass = ''\n            if (!this.answered && this.selectedIndex === index) {\n                answerClass = 'selected'\n            } else if (this.answered && this.correctIndex === index) {\n                answerClass = 'correct'\n            } else if (this.answered &&\n                this.selectedIndex === index &&\n                this.correctIndex !== index\n            ) {\n                answerClass = 'incorrect'\n            }\n            return answerClass\n        }\n    }\n}\n</script>\n\n<style scoped>\n.list-group{\n    margin-bottom: 15px;\n}\n.list-group-item:hover{\n    background: #EEE;\n    cursor: pointer;\n}\n.btn{\n    margin: 0 5px;\n}\n.selected{\n    background-color: lightblue;\n}\n.correct{\n    background-color: lightgreen;\n}\n.incorrect{\n    background-color: red;\n}\n</style>\n"]}]}